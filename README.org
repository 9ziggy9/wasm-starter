* WASM starter
This is an absolute bare bones starter to get wasm up and running locally. Quite painful that an HTTP server is even needed to bootstrap web assembly, but it is what it is.
*** Why index.html?
Because you need index.html to bootstrap Javascript...
*** Why index.js?
Because you need index.js to bootstrap WebAssembly...
*** Why the shell script?
Because you need fetch to instantiate WebAssembly... And otherwise you're going to get a CORS error. Shell script just runs python3 simple http server. Don't forget to mark run as executable.
*** Why not pipenv or virtual environment?
I don't even want to use python, but everyone has simple http--why would I use flask/django or express or something like this?
* WebAssembly Jump Start
- WebAssembly is a binary format... Not human readable assembly language, complete and total misnomer.
- For human readable WebAssembly, we have "WebAssembly Text" which uses a lisp-like syntax (S-expressions) as a readable form of the binary instructions. No, I'm not kidding.
*** How do I write raw WebAssembly?
As previously stated, you will need some type of WebAssembly Text compiler, unless you want to write raw WebAssembly binary (nope). A popular choice is something called "wabt" (WebAssembly Binary Toolkit) which provides the "wat2wasm" compiler.
- https://github.com/WebAssembly/wabt
To compile your .wat file; wat2wasm hello.wat



*** NOTES
Note that if you are writing WebAssembly Text, you must use (export "nameOfFunction") in order to export said function to WASM instance. You can access your functions in the instantiate wasm object; wasm.instances.nameOfFunction -- here I use dereferencing for cleanliness.
* Big Picture
This is the bare minimum needed to interface with WASM, strictly speaking, from here all one would need is a compiler for whatever language they are using to compile to WASM. I will include many examples for many different langauges shortly but first should come C with and without emscripten.
